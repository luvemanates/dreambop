class ProductDecorator < Draper::Decorator
  decorates :product
  delegate_all

 
  def price_as_currency
    return h.number_to_currency(product.price)
  end

  def tech_details_with_links
    tech_details = self.technical_details_display
    tech_details << h.link_to( ' Manufacturer: ', h.manufacturers_path) + h.link_to(self.manufacturer.name, h.manufacturer_path(self.manufacturer))
    tech_details << ' Weight: ' + self.weight.to_s + ' lb(s).'
    return tech_details
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
